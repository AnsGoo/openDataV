import{R as d,o as r,c as l,a as o,O as e,b as s,W as c}from"./index-3ca9a95a.js";const p=""+new URL("015-b388d3f2.png",import.meta.url).href,i=""+new URL("16-70f535e4.png",import.meta.url).href,n=""+new URL("17-61604811.png",import.meta.url).href,h={class:"markdown-body"},u=c('<p><div class="toc-box"><ul><li><a href="javascript:document.querySelector(&#39;#_5&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">静态数据</a></li><ul><li><a href="javascript:document.querySelector(&#39;#_14&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">新增与修改</a></li><li><a href="javascript:document.querySelector(&#39;#_18&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">删除</a></li><li><a href="javascript:document.querySelector(&#39;#_22&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">设计思路</a></li></ul><li><a href="javascript:document.querySelector(&#39;#Rest_34&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">Rest数据</a></li><ul><li><a href="javascript:document.querySelector(&#39;#_41&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">跨域拦截</a></li><li><a href="javascript:document.querySelector(&#39;#_46&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">设计思路</a></li></ul><li><a href="javascript:document.querySelector(&#39;#_53&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">脚本</a></li><ul><li><a href="javascript:document.querySelector(&#39;#Javascript_66&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">Javascript脚本</a></li><li><a href="javascript:document.querySelector(&#39;#Python_92&#39;).scrollIntoView({behavior: &#39;smooth&#39;})">Python脚本</a></li></ul></ul></div></p><p>平台集成了<code>通用数据</code>管理功能，目前已完成<code>静态数据</code>和<code>Rest数据</code>功能开发</p><h1><a id="_5"></a>静态数据</h1><p>静态数据是指平台提供了一个统一接口用来读取或者存储的数据</p><p><img src="'+p+'" alt=""></p><p>用户可以在静态页面对平台存储的静态数据进行<code>修改</code>、<code>删除</code>和<code>新增</code></p><h2><a id="_14"></a>新增与修改</h2>',7),_=o("code",null,"原始数据",-1),m=o("code",null,"修改",-1),v=o("code",null,"新增",-1),b=o("code",null,"处理数据",-1),f=c('<h2><a id="_18"></a>删除</h2><p>在右侧静态数据列表中，鼠标右击即可删除对应的静态数据</p><h2><a id="_22"></a>设计思路</h2><blockquote><p>很多低代码平台的静态数据保存在页面中配置文件中，但是我们无法预测用户配置的静态数据大小，如果将静态数据存储在页面配置文件中，将会导致页面配置文件数据体积增大，进而影响页面渲染速度。</p></blockquote><blockquote><p>静态数据保存在平台后台的话又会带来另一个问题，静态数据在多个组件中被复用时，在某个组件中更改了静态数据内容时所带来的影响是不是可预见的，答案是否定的。</p></blockquote><blockquote><p>我们不建议在组件使用过程中更改静态数据内容，我们可以通过在每个组件中写不同的脚本来适配同一数据源在不同组件复用时数据差异。</p></blockquote><blockquote><p>静态数据的修改应该考虑数据被复用时，对使用的组件效果影响，因此我们将静态数据设计为存储在平台后端，在使用组件使用过程中不可更改，但是在静态数据页面可修改！</p></blockquote><h1><a id="Rest_34"></a>Rest数据</h1><p><code>Rest 数据</code>是通过<code>HTTP</code>接口获取数据,应该是平台最主要的获取数据的方式，一个类似<code>PostMan</code>的接口调试</p><p><img src="'+i+'" alt=""></p><h2><a id="_41"></a>跨域拦截</h2><p>因为浏览器的安全策略，一旦你的接口服务未配置跨域相关安全策略，那么是无法在本平台进行接口调试的，可以跟接口服务开发人员协调，支持跨域访问</p><h2><a id="_46"></a>设计思路</h2><blockquote><p><code>Rest数据</code>页面设计是类似于<code>PostMan</code>的作用，但是很遗憾，我们尚未达到<code>Postman</code>的效果，目前仅支持<code>application/json</code>数据的请求和响应，但是对于<code>FormData</code>、<code>Blob</code>和<code>ArrayBuffer</code>等数据尚未支持</p></blockquote><blockquote><p><code>Rest数据</code>的定义数据是可控的，主要是 <code>url</code>、<code>method</code>、<code>headers</code>、<code>params</code>、<code>data</code>，因此整个 <code>Rest数据</code>定义我们是保存在页面配置文件中的，我们支持在<code>Rest数据</code>页面增加或者修改接口定义，同时我们也支持在单个组件中添加接口，也就是说你修改任意一接口也不会影响已经在其他组件中被使用的该接口</p></blockquote><h1><a id="_53"></a>脚本</h1><p>为了提高组件的<code>复用性</code>和接口的<code>兼容性</code>，我们提供了脚本功能。</p><p><img src="'+n+`" alt=""></p><p>通过脚本你可以将<code>接口返回的数据</code>处理成<code>组件所需要的数据</code>,这样就你就无需担心你的组件和接口之间的无法兼容的问题。</p><p>目前我们的脚本只支持<code>javascript</code>,后续将支持<code>python</code>，因为<code>Python</code>在数据处理方面的先天优势十分的吸引我们，我们希望可以将<code>Python</code>的引入，可以和平台碰撞出耀眼的火光。</p><h2><a id="Javascript_66"></a>Javascript脚本</h2><p><code>Javascript脚本</code> 我们使用的是js的 <code>new Function()</code>特性，因此<code>Javascript脚本</code>,你只需要书写函数体本身即可</p><p>例如</p><pre><code class="language-javascript">const filterFunc = (resp，options) =&gt; {
  return resp.filter(el =&gt; el.value &gt; 30)
}

</code></pre><p>你只需要写</p><pre><code class="language-javascript">return resp.filter(el =&gt; el.value &gt; 30)
</code></pre><p><code>Javascript脚本</code> 生成函数默认有两个位置参数<code>resp</code>和<code>options</code></p><ul><li><p><code>resp</code>: 需要处理的数据</p></li><li><p><code>options</code>: 在组件中使用，默认返回的组件的<code>propValue</code>属性</p></li></ul><h2><a id="Python_92"></a>Python脚本</h2><p>待实现</p>`,30),w={__name:"Data",setup(q,{expose:t}){return t({frontmatter:{}}),(g,j)=>{const a=d("x-icon");return r(),l("div",h,[u,o("p",null,[e("点击静态数据的"),_,e("页签,在代码编辑器里面可以对静态数据进行"),m,e("和"),v,e("，点击"),s(a,{name:"save"}),e("按钮，即可将在"),b,e("页签看到，此静态数据被脚本处理完成之后的效果，点击右上角的保存按钮，即可将此静态书进行更新和保存")]),f])}}};export{w as default};
